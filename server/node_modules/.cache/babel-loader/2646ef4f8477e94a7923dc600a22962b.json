{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n\n// const useFetch = (url) => {\n//   const [data, setData] = useState(null);\n//   const [isPending, setIsPending] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const abortCont = new AbortController();\n\n//     setTimeout(() => {\n//       fetch(url, { signal: abortCont.signal })\n//       .then(res => {\n//         if (!res.ok) { // error coming back from server\n//           throw Error('could not fetch the data for that resource');\n//         } \n//         return res.json();\n//       })\n//       .then(data => {\n//         setIsPending(false);\n//         setData(data);\n//         setError(null);\n//       })\n//       .catch(err => {\n//         if (err.name === 'AbortError') {\n//           console.log('fetch aborted')\n//         } else {\n//           // auto catches network / connection error\n//           setIsPending(false);\n//           setError(err.message);\n//         }\n//       })\n//     }, 1000);\n\n//     // abort the fetch\n//     return () => abortCont.abort();\n//   }, [url])\n\n//   return { data, isPending, error };\n// }\n\n// export default useFetch;\n\n// useFetch.js\n\nimport { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      } catch (error) {\n        setError('Error fetching data');\n        setIsPending(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","fetchData","response","fetch","ok","Error","json"],"sources":["C:/Users/parth/OneDrive/Desktop/React Project6/Complete-React-Tutorial-lesson-32/dojo-blog/src/useFetch.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n\n// const useFetch = (url) => {\n//   const [data, setData] = useState(null);\n//   const [isPending, setIsPending] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const abortCont = new AbortController();\n\n//     setTimeout(() => {\n//       fetch(url, { signal: abortCont.signal })\n//       .then(res => {\n//         if (!res.ok) { // error coming back from server\n//           throw Error('could not fetch the data for that resource');\n//         } \n//         return res.json();\n//       })\n//       .then(data => {\n//         setIsPending(false);\n//         setData(data);\n//         setError(null);\n//       })\n//       .catch(err => {\n//         if (err.name === 'AbortError') {\n//           console.log('fetch aborted')\n//         } else {\n//           // auto catches network / connection error\n//           setIsPending(false);\n//           setError(err.message);\n//         }\n//       })\n//     }, 1000);\n\n//     // abort the fetch\n//     return () => abortCont.abort();\n//   }, [url])\n\n//   return { data, isPending, error };\n// }\n \n// export default useFetch;\n\n\n// useFetch.js\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      } catch (error) {\n        setError('Error fetching data');\n        setIsPending(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,CAAC;QACjC,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMV,IAAI,GAAG,MAAMO,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCV,OAAO,CAACD,IAAI,CAAC;QACbG,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,qBAAqB,CAAC;QAC/BF,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAACL,EAAA,CA1BIF,QAAQ;AA4Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module"}