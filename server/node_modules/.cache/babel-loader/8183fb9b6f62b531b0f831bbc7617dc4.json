{"ast":null,"code":"// import { useState, useEffect } from 'react';\n\n// const useFetch = (url) => {\n//   const [data, setData] = useState(null);\n//   const [isPending, setIsPending] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const abortCont = new AbortController();\n\n//     setTimeout(() => {\n//       fetch(url, { signal: abortCont.signal })\n//       .then(res => {\n//         if (!res.ok) { // error coming back from server\n//           throw Error('could not fetch the data for that resource');\n//         } \n//         return res.json();\n//       })\n//       .then(data => {\n//         setIsPending(false);\n//         setData(data);\n//         setError(null);\n//       })\n//       .catch(err => {\n//         if (err.name === 'AbortError') {\n//           console.log('fetch aborted')\n//         } else {\n//           // auto catches network / connection error\n//           setIsPending(false);\n//           setError(err.message);\n//         }\n//       })\n//     }, 1000);\n\n//     // abort the fetch\n//     return () => abortCont.abort();\n//   }, [url])\n\n//   return { data, isPending, error };\n// }\n\n// export default useFetch;","map":{"version":3,"names":[],"sources":["C:/Users/parth/OneDrive/Desktop/React Project6/Complete-React-Tutorial-lesson-32/dojo-blog/src/useFetch.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n\n// const useFetch = (url) => {\n//   const [data, setData] = useState(null);\n//   const [isPending, setIsPending] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const abortCont = new AbortController();\n\n//     setTimeout(() => {\n//       fetch(url, { signal: abortCont.signal })\n//       .then(res => {\n//         if (!res.ok) { // error coming back from server\n//           throw Error('could not fetch the data for that resource');\n//         } \n//         return res.json();\n//       })\n//       .then(data => {\n//         setIsPending(false);\n//         setData(data);\n//         setError(null);\n//       })\n//       .catch(err => {\n//         if (err.name === 'AbortError') {\n//           console.log('fetch aborted')\n//         } else {\n//           // auto catches network / connection error\n//           setIsPending(false);\n//           setError(err.message);\n//         }\n//       })\n//     }, 1000);\n\n//     // abort the fetch\n//     return () => abortCont.abort();\n//   }, [url])\n\n//   return { data, isPending, error };\n// }\n \n// export default useFetch;"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}